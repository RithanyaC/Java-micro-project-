import java.util.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class Main {
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
    private static final String MENU = "\nWelcome to the Car Service Scheduler!\n"
            + "1. Schedule a Service Appointment\n"
            + "2. View All Appointments\n"
            + "3. Exit\n"
            + "Enter your choice: ";

    // Enum for predefined services
    enum ServiceType {
        OIL_CHANGE("Oil Change", 29.99),
        TIRE_ROTATION("Tire Rotation", 49.99),
        BRAKE_CHECK("Brake Check", 79.99);

        private final String name;
        private final double cost;

        ServiceType(String name, double cost) {
            this.name = name;
            this.cost = cost;
        }

        @Override
        public String toString() {
            return name + " ($" + String.format("%.2f", cost) + ")";
        }
    }

    // Car class
    static class Car {
        String make, model, year, vin;

        Car(String make, String model, String year, String vin) {
            this.make = make;
            this.model = model;
            this.year = year;
            this.vin = vin;
        }

        @Override
        public String toString() {
            return "Car [Make=" + make + ", Model=" + model + ", Year=" + year + ", VIN=" + vin + "]";
        }
    }

    // ServiceAppointment class
    static class ServiceAppointment {
        Car car;
        ServiceType service;
        LocalDateTime dateTime;

        ServiceAppointment(Car car, ServiceType service, LocalDateTime dateTime) {
            this.car = car;
            this.service = service;
            this.dateTime = dateTime;
        }

        @Override
        public String toString() {
            return "Appointment for " + car + " on " + dateTime.format(DATE_FORMATTER) + " for service: " + service;
        }
    }

    public static void main(String[] args) {
        List<ServiceAppointment> appointments = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.print(MENU);
            int choice = getValidatedInt(scanner, 1, 3);

            switch (choice) {
                case 1:
                    scheduleAppointment(scanner, appointments);
                    break;
                case 2:
                    viewAppointments(appointments);
                    break;
                case 3:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void scheduleAppointment(Scanner scanner, List<ServiceAppointment> appointments) {
        System.out.print("\nEnter Car Details\nMake: ");
        String make = scanner.nextLine();
        System.out.print("Model: ");
        String model = scanner.nextLine();
        System.out.print("Year: ");
        String year = scanner.nextLine();
        System.out.print("VIN: ");
        String vin = scanner.nextLine();
        Car car = new Car(make, model, year, vin);

        System.out.println("\nAvailable Services:");
        ServiceType[] services = ServiceType.values();
        for (int i = 0; i < services.length; i++) {
            System.out.println((i + 1) + ". " + services[i]);
        }

        System.out.print("\nSelect a service (1-" + services.length + "): ");
        int serviceIndex = getValidatedInt(scanner, 1, services.length) - 1;
        ServiceType service = services[serviceIndex];

        LocalDateTime dateTime = null;
        while (dateTime == null) {
            System.out.print("Enter Appointment Date (yyyy-MM-dd HH:mm): ");
            String dateTimeStr = scanner.nextLine();
            try {
                dateTime = LocalDateTime.parse(dateTimeStr, DATE_FORMATTER);
            } catch (DateTimeParseException e) {
                System.out.println("Invalid date format. Please try again.");
            }
        }

        appointments.add(new ServiceAppointment(car, service, dateTime));
        System.out.println("Appointment Scheduled Successfully!");
    }

    private static void viewAppointments(List<ServiceAppointment> appointments) {
        if (appointments.isEmpty()) {
            System.out.println("No appointments scheduled.");
        } else {
            System.out.println("\nScheduled Appointments:");
            appointments.forEach(System.out::println);
        }
    }

    private static int getValidatedInt(Scanner scanner, int min, int max) {
        while (true) {
            try {
                int input = Integer.parseInt(scanner.nextLine());
                if (input >= min && input <= max) {
                    return input;
                }
                System.out.println("Please enter a number between " + min + " and " + max + ".");
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a valid number.");
            }
        }
    }
}
